/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Shuvo Podder
 */
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.stream.Collectors;

import java.awt.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;

public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Graph = new java.awt.Button();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        text = new javax.swing.JTextArea();
        panelChart = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        Graph.setLabel("Graph");
        Graph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GraphActionPerformed(evt);
            }
        });

        jButton2.setText("Check");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Mostly Common Word");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Term Indexing Project");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(219, 219, 219)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel1)
                        .addGap(143, 143, 143)
                        .addComponent(jButton2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Graph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(134, 134, 134))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jButton2)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(Graph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Words", "Doc 1", "Doc 2", "Doc 3", "Doc 4", "Doc 5", "Doc 6", "Doc 7", "Doc 8"
            }
        ));
        jScrollPane2.setViewportView(table);

        text.setColumns(20);
        text.setRows(5);
        jScrollPane3.setViewportView(text);

        panelChart.setBackground(new java.awt.Color(0, 102, 255));
        panelChart.setForeground(new java.awt.Color(51, 102, 255));
        panelChart.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 698, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 677, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(panelChart, javax.swing.GroupLayout.PREFERRED_SIZE, 698, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE))
                    .addComponent(panelChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(47, 47, 47))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GraphActionPerformed
        panelChart.validate();// Graph obj =new Graph();
        // obj.setVisible(true);
        //JFreeChart chart = ChartFactory.createBarChart(null, "", "", dataset, PlotOrientation.VERTICAL, false, true, false );

        /* DefaultCategoryDataset barChartData=new DefaultCategoryDataset();
         barChartData.setValue(2000,"Amount","Januray");
         barChartData.setValue(2500,"Amount","Fanuray");
         barChartData.setValue(3000,"Amount","Muray");
         barChartData.setValue(200,"Amount","Januray");
         barChartData.setValue(500,"Amount","Fanuray");
         barChartData.setValue(300,"Amount","Muray");
         barChartData.setValue(9000,"Amount","Januray");
         barChartData.setValue(200,"Amount","Fanuray");
         barChartData.setValue(3500,"Amount","Muray");
         barChartData.setValue(1000,"Amount","Januray");
         barChartData.setValue(1500,"Amount","Fanuray");
         barChartData.setValue(7000,"Amount","Muray");
         barChartData.setValue(2000,"Amount","Januray");
         barChartData.setValue(2500,"Amount","Fanuray");
         barChartData.setValue(3000,"Amount","Muray");*/
        /*      String series1 = "Doc1";
         String series2 = "Doc2";
         String series3 = "Doc3";
         String series4 = "Doc4";
         DefaultCategoryDataset dataset=new DefaultCategoryDataset();

         dataset.addValue(5.0, series1, "string name");
         dataset.addValue(4.8, series1, "2006");
         dataset.addValue(4.5, series1, "2007");
         dataset.addValue(4.3, series1, "2008");
         dataset.addValue(4.0, series1, "2009");
         dataset.addValue(4.1, series1, "2010");
         dataset.addValue(4.2, series1, "2011");
         dataset.addValue(4.2, series1, "2012");
         dataset.addValue(4.0, series1, "2013");
 
         dataset.addValue(4.0, series2, "2005");
         dataset.addValue(4.2, series2, "2006");
         dataset.addValue(3.8, series2, "2007");
         dataset.addValue(3.6, series2, "2008");
         dataset.addValue(3.4, series2, "2009");
         dataset.addValue(3.4, series2, "2010");
         dataset.addValue(3.3, series2, "2011");
         dataset.addValue(3.1, series2, "2012");
         dataset.addValue(3.2, series2, "2013");
 
         dataset.addValue(3.6, series3, "2005");
         dataset.addValue(3.4, series3, "2006");
         dataset.addValue(3.5, series3, "2007");
         dataset.addValue(3.2, series3, "2008");
         dataset.addValue(3.2, series3, "2009");
         dataset.addValue(3.0, series3, "2010");
         dataset.addValue(2.8, series3, "2011");
         dataset.addValue(2.8, series3, "2012");
         dataset.addValue(2.6, series3, "2013");
 
         dataset.addValue(3.2, series4, "2005");
         dataset.addValue(3.2, series4, "2006");
         dataset.addValue(3.0, series4, "2007");
         dataset.addValue(3.0, series4, "2008");
         dataset.addValue(2.8, series4, "2009");
         dataset.addValue(2.7, series4, "2010");
         dataset.addValue(2.6, series4, "2011");
         dataset.addValue(2.6, series4, "2012");
         dataset.addValue(2.4, series4, "2013");
        
         String chartTitle = "Word Distribution";
         String categoryAxisLabel = "Words ";
         String valueAxisLabel = "Frequency";
         JFreeChart chart = ChartFactory.createLineChart(chartTitle, categoryAxisLabel, valueAxisLabel, dataset);
         //  JFreeChart barChart=ChartFactory.createBarChart("Word Distribution","Monthly","Frequency",barChartData,PlotOrientation.VERTICAL,false,true,false);
         // CategoryPlot barchrt=barChart.getCategoryPlot();
         // barchrt.setRangeGridlinePaint(Color.ORANGE);
        
         ChartPanel barPanel=new ChartPanel(chart);//barChart
        
         panelChart.removeAll();
         panelChart.add(barPanel,BorderLayout.CENTER);
         panelChart.validate();
         */

    }//GEN-LAST:event_GraphActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        String chartTitle = "Word Distribution";
        String categoryAxisLabel = "Words ";
        String valueAxisLabel = "Frequency";
        int count = 0, i = 1;
        String series[] = new String[100];
        Map<String, List<Integer>> map = new HashMap<String, List<Integer>>();//posting
        
        
        
        Map<PackingListRow, Integer> items = new HashMap<PackingListRow, Integer>();//id
        HashMap<String, Integer> hm = new HashMap<>();//total frequency
        List<String> ss = new ArrayList<String>();
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        File dir = new File("nlp");
        // PrintWriter pw = new PrintWriter("output.txt");
        String[] fileNames = dir.list();
        for (String fileName : fileNames) {

            File f = new File(dir, fileName);
            series[i] = fileName;
            

            String st = "";
            try {
                BufferedReader br = new BufferedReader(new FileReader(f));
                while ((st = br.readLine()) != null) {
                    st = normalizeText(st);
                    //System.out.println(st);
                    Pattern p = Pattern.compile("[a-zA-Z]+");
                    Matcher m = p.matcher(st.toLowerCase());

                    while (m.find()) {
                        String word = m.group(); //spilt word from sentense
                        if (!hm.containsKey(word)) {
                            hm.put(word, 1);
                           // dictionary.put(word, i); 

                        } else {
                            hm.put(word, hm.get(word) + 1);
                        }
                        if (map.get(word) == null) {
                            map.put(word, new ArrayList<Integer>());
                        }
                        map.get(word).add(i);
                        addItem(items, new PackingListRow(word, i), 1);
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            i++;
            count++;

        }
        removeDulpicate(map);//merge
       map = Sort3(map);//sort
        MostlyCommon(map, count, items, ss);//word matching
        //Frequency(hm);
        //System.out.println(map);
        //System.out.println(items);
        //System.out.println("list:"+ ss);
        text.setText(ss.toString());
              // ArrayList<User> list = getUsersList();

        //for(int q=0;q<5;q++){
        //PackingListRow obj=new PackingListRow(ss.get(1),1);
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        Object[] row = new Object[count+1];
        for (int ii = 0; ii < ss.size(); ii++) {

            row[0] = ss.get(ii);
            for (int j = 1; j < count + 1; j++) {
                PackingListRow obj = new PackingListRow(ss.get(ii), j);
                dataset.addValue(items.get(obj), series[j], ss.get(ii));
                // System.out.println("Package:"+ss.get(ii)+"1:" +items.get(obj));
                row[j] = items.get(obj);
            }
            model.addRow(row);
        }
       //Graph2 obj =new Graph2(dataset,chartTitle, categoryAxisLabel, valueAxisLabel);
        //obj.setVisible(true);
        JFreeChart chart = ChartFactory.createLineChart(chartTitle, categoryAxisLabel, valueAxisLabel, dataset);

        ChartPanel barPanel = new ChartPanel(chart);

        panelChart.removeAll();
        panelChart.add(barPanel, BorderLayout.CENTER);
        //panelChart.validate();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button Graph;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel panelChart;
    private javax.swing.JTable table;
    private javax.swing.JTextArea text;
    // End of variables declaration//GEN-END:variables

    private static String normalizeText(String str) throws FileNotFoundException {
        Scanner s = new Scanner(new File("stopwords.txt"));
        ArrayList<String> list2 = new ArrayList<String>();
        while (s.hasNext()) {
            list2.add(s.next());
        }
        s.close();
        List<String> allWords = new ArrayList<>(Arrays.asList(str.toLowerCase().split(" ")));
        allWords.removeAll(list2);
        String result = String.join(" ", allWords);
        return result;
    }

    private static void MostlyCommon(Map<String, List<Integer>> map, int count, Map<PackingListRow, Integer> items, List<String> sss) {
        Set< Map.Entry< String, List<Integer>>> sst = map.entrySet();
//System.out.println("count:"+count);
        int arr[][] = new int[map.size()][count + 1];
        int i = 0, j = 0;
        for (Map.Entry< String, List<Integer>> me : sst) {
            //System.out.print(me.getKey() + ":");
            // System.out.println(me.getValue());

            List<Integer> stringList = new ArrayList(me.getValue());
            Integer[] itemsArray = new Integer[stringList.size()];
            itemsArray = stringList.toArray(itemsArray);

            for (Integer sw : itemsArray) {
                arr[i][sw - 1] = 1;                                   //matrix  DOC1   Doc2   Doc3
                j++;
            }                                                        //word1    1      0       1
            i++;                                                    // word2    0      1       0
        }                                                           //word3     0      0       1
                                                                    //word3     1      1       1

                //System.out.println("arr: " + arr[i][s]);
                
           
            
        
        int arr2[] = new int[map.size()];
      
        int x = 0, t = 0;
        for (i = 0; i < arr.length; i++) {
            for (j = 0; j < arr[i].length - 1; j++) {
                System.out.print(arr[i][j] + " ");
                if (arr[i][j] == 1) {
                    t++;
                }
            }
            if (t == count) {
                arr2[x] = i;
                x++;
            }
            t = 0;
            System.out.println(" ");
        }
        int y = 0, z = 0;
        for (Map.Entry<String, List<Integer>> ls : map.entrySet()) {
            if (y == arr2[z]) {
                System.out.println("Mostly common  " + ls.getKey());

                sss.add(ls.getKey());
                z++;
                PackingListRow obj = new PackingListRow(ls.getKey(), 1);
                //System.out.println("Package:" + ss.getKey() + "1:" + items.get(obj));
            }
            y++;
        }

       // ArrayList<User> list = getUsersList();
        /*int a=10,x=0;
         i=0;
         j=0;int arr2[]=new int[100];
         for(i=0;i<arr[0].length;i++){
         arr2[i]=arr[0][i];
         }
         while(a>0){
         for(i=1;i<arr.length;i++){
         if(arr2[i]==arr[i+1][x]) {
                   
         }
         }
         }*/
    }

    private static void removeDulpicate(Map<String, List<Integer>> map) {

        Set< Map.Entry< String, List<Integer>>> srr = map.entrySet();

        for (Map.Entry< String, List<Integer>> e : srr) {
            List<Integer> list3 = new ArrayList<>(e.getValue());

            List<Integer> newList = list3.stream().distinct().collect(Collectors.toList());

            map.replace(e.getKey(), newList);

        }
    }

    private static Map<String, List<Integer>> Sort3(Map<String, List<Integer>> map) {
        List<Map.Entry<String, List<Integer>>> list4
                = new LinkedList<Map.Entry<String, List<Integer>>>(map.entrySet());

        // Sort the list 
        Collections.sort(list4, new Comparator<Map.Entry<String, List<Integer>>>() {
            public int compare(Map.Entry<String, List<Integer>> o1,
                    Map.Entry<String, List<Integer>> o2) {
                return (o1.getKey()).compareTo(o2.getKey());
            }
        });

        // put data from sorted list to hashmap  
        HashMap<String, List<Integer>> temp = new LinkedHashMap<String, List<Integer>>();
        for (Map.Entry<String, List<Integer>> aa : list4) {
            temp.put(aa.getKey(), aa.getValue());
        }
        return temp;
    }

    private static void addItem(Map<PackingListRow, Integer> items, PackingListRow row, int quantity) {

        Integer oldQuantity = items.get(row);
        items.put(row, oldQuantity == null ? quantity : quantity + oldQuantity);

    }

}
